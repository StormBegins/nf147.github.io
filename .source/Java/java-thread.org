#+TITLE: 线程



* 基本语法

使用新线程的步骤:
1. 通过覆写 Thread 的 run 方法，配置新线程需要做的事情
2. 创建新线程对象 ~new YourThread()~
3. 开启线程 ~start~

代码示例:
#+BEGIN_SRC java
  class MyThread extends Thread {
      @Override
      public void run () {
          System.out.println("在新的线程内运行的任务。这任务是独立的，不会影响主线程代码执行。");
      }
  }
  public class Main {
      public static void main (String... args) {
          Thread myThread = new MyThread();   // 创建线程
          mythread.start();                   // 运行线程
      }
  }
#+END_SRC

也可以这样:
#+BEGIN_SRC java
  class MyThread implements Runnable {
      @Override
      public void run () {
          System.out.println("在新的线程内运行的任务。这任务是独立的，不会影响主线程代码执行。");
      }
  }
  public class Main {
      public static void main (String... args) {
          Thread myThread = new Thread(new MyThread());   // 创建线程
          mythread.start();                               // 运行线程
      }
  }
#+END_SRC

上面代码可以简写为:
#+BEGIN_SRC java
  // 使用匿名内部类进行简化
  public class Main {
      public static void main (String... args) {
          Thread myThread = new Thread () {
                  @Override
                  public void run () {
                      System.out.println("在新的线程内运行的任务。这任务是独立的，不会影响主线程代码执行。");
                  }
              };
          myThread.start();
      }
  }
#+END_SRC

使用 jdk8 的语法，甚至可以简化为:
#+BEGIN_SRC java
    public class Main {
        public static void main (String... args) {
            new Thread(() -> System.out.println("task")).start();
        }
    }
#+END_SRC

* API

[[file:img/thread_2018-08-13_02-31-05.png]]

- Thread.sleep
- Thread.join
- Thread.start
- Thread.currentThread
- 其他

* Java 线程发展历史

- Thread
- ExecuteService, 线程池
- Fork/Join
* 面试题摘要
** 什么是线程
** 线程和进程有什么区别
** 如何在 Java 中使用新线程
** start() 和 run() 有什么区别
** Thread.join 方法有什么用
** 假如新建T1、T2、T3三个线程，如何保证它们按顺序执行？

** volatile 变了是做什么的
** 如果一个线程中发生了异常会怎么样
** 什么是 ThreadLocal 变量
** 什么是线程池，为什么要使用
** Thread.sleep 和 wait 方法有什么不同
** synchronized 关键词是做什么的
